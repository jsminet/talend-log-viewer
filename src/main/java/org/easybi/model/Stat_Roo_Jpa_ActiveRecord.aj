// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.easybi.model;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.easybi.model.Stat;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Stat_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Stat.entityManager;
    
    public static final List<String> Stat.fieldNames4OrderClauseFilter = java.util.Arrays.asList("project", "job", "job_version", "context", "origin", "message_type", "message", "duration", "moment", "pid", "father_pid", "root_pid", "system_pid", "job_repository_id");
    
    public static final EntityManager Stat.entityManager() {
        EntityManager em = new Stat().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Stat.countStats() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Stat o", Long.class).getSingleResult();
    }
    
    public static List<Stat> Stat.findAllStats() {
        return entityManager().createQuery("SELECT o FROM Stat o", Stat.class).getResultList();
    }
    
    public static List<Stat> Stat.findAllStats(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Stat o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Stat.class).getResultList();
    }
    
    public static Stat Stat.findStat(Long id) {
        if (id == null) return null;
        return entityManager().find(Stat.class, id);
    }
    
    public static List<Stat> Stat.findStatEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Stat o", Stat.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Stat> Stat.findStatEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Stat o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Stat.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Stat.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Stat.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Stat attached = Stat.findStat(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Stat.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Stat.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Stat Stat.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Stat merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
