// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.easybi.model;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.easybi.model.Stat;

privileged aspect Stat_Roo_Finder {
    
    public static Long Stat.countFindStatsByProjectEqualsOrJobEqualsOrJob_versionEqualsOrContextEqualsOrOriginEqualsOrMessage_typeEqualsOrMessageEqualsOrMomentBetween(String project, String job, String job_version, String context, String origin, String message_type, String message, Date minMoment, Date maxMoment) {
        if (project == null || project.length() == 0) throw new IllegalArgumentException("The project argument is required");
        if (job == null || job.length() == 0) throw new IllegalArgumentException("The job argument is required");
        if (job_version == null || job_version.length() == 0) throw new IllegalArgumentException("The job_version argument is required");
        if (context == null || context.length() == 0) throw new IllegalArgumentException("The context argument is required");
        if (origin == null || origin.length() == 0) throw new IllegalArgumentException("The origin argument is required");
        if (message_type == null || message_type.length() == 0) throw new IllegalArgumentException("The message_type argument is required");
        if (message == null || message.length() == 0) throw new IllegalArgumentException("The message argument is required");
        if (minMoment == null) throw new IllegalArgumentException("The minMoment argument is required");
        if (maxMoment == null) throw new IllegalArgumentException("The maxMoment argument is required");
        EntityManager em = Stat.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Stat AS o WHERE o.project = :project  OR o.job = :job  OR o.job_version = :job_version  OR o.context = :context  OR o.origin = :origin  OR o.message_type = :message_type  OR o.message = :message  OR o.moment BETWEEN :minMoment AND :maxMoment", Long.class);
        q.setParameter("project", project);
        q.setParameter("job", job);
        q.setParameter("job_version", job_version);
        q.setParameter("context", context);
        q.setParameter("origin", origin);
        q.setParameter("message_type", message_type);
        q.setParameter("message", message);
        q.setParameter("minMoment", minMoment);
        q.setParameter("maxMoment", maxMoment);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Stat> Stat.findStatsByProjectEqualsOrJobEqualsOrJob_versionEqualsOrContextEqualsOrOriginEqualsOrMessage_typeEqualsOrMessageEqualsOrMomentBetween(String project, String job, String job_version, String context, String origin, String message_type, String message, Date minMoment, Date maxMoment) {
        if (project == null || project.length() == 0) throw new IllegalArgumentException("The project argument is required");
        if (job == null || job.length() == 0) throw new IllegalArgumentException("The job argument is required");
        if (job_version == null || job_version.length() == 0) throw new IllegalArgumentException("The job_version argument is required");
        if (context == null || context.length() == 0) throw new IllegalArgumentException("The context argument is required");
        if (origin == null || origin.length() == 0) throw new IllegalArgumentException("The origin argument is required");
        if (message_type == null || message_type.length() == 0) throw new IllegalArgumentException("The message_type argument is required");
        if (message == null || message.length() == 0) throw new IllegalArgumentException("The message argument is required");
        if (minMoment == null) throw new IllegalArgumentException("The minMoment argument is required");
        if (maxMoment == null) throw new IllegalArgumentException("The maxMoment argument is required");
        EntityManager em = Stat.entityManager();
        TypedQuery<Stat> q = em.createQuery("SELECT o FROM Stat AS o WHERE o.project = :project  OR o.job = :job  OR o.job_version = :job_version  OR o.context = :context  OR o.origin = :origin  OR o.message_type = :message_type  OR o.message = :message  OR o.moment BETWEEN :minMoment AND :maxMoment", Stat.class);
        q.setParameter("project", project);
        q.setParameter("job", job);
        q.setParameter("job_version", job_version);
        q.setParameter("context", context);
        q.setParameter("origin", origin);
        q.setParameter("message_type", message_type);
        q.setParameter("message", message);
        q.setParameter("minMoment", minMoment);
        q.setParameter("maxMoment", maxMoment);
        return q;
    }
    
    public static TypedQuery<Stat> Stat.findStatsByProjectEqualsOrJobEqualsOrJob_versionEqualsOrContextEqualsOrOriginEqualsOrMessage_typeEqualsOrMessageEqualsOrMomentBetween(String project, String job, String job_version, String context, String origin, String message_type, String message, Date minMoment, Date maxMoment, String sortFieldName, String sortOrder) {
        if (project == null || project.length() == 0) throw new IllegalArgumentException("The project argument is required");
        if (job == null || job.length() == 0) throw new IllegalArgumentException("The job argument is required");
        if (job_version == null || job_version.length() == 0) throw new IllegalArgumentException("The job_version argument is required");
        if (context == null || context.length() == 0) throw new IllegalArgumentException("The context argument is required");
        if (origin == null || origin.length() == 0) throw new IllegalArgumentException("The origin argument is required");
        if (message_type == null || message_type.length() == 0) throw new IllegalArgumentException("The message_type argument is required");
        if (message == null || message.length() == 0) throw new IllegalArgumentException("The message argument is required");
        if (minMoment == null) throw new IllegalArgumentException("The minMoment argument is required");
        if (maxMoment == null) throw new IllegalArgumentException("The maxMoment argument is required");
        EntityManager em = Stat.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Stat AS o WHERE o.project = :project  OR o.job = :job  OR o.job_version = :job_version  OR o.context = :context  OR o.origin = :origin  OR o.message_type = :message_type  OR o.message = :message  OR o.moment BETWEEN :minMoment AND :maxMoment");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Stat> q = em.createQuery(queryBuilder.toString(), Stat.class);
        q.setParameter("project", project);
        q.setParameter("job", job);
        q.setParameter("job_version", job_version);
        q.setParameter("context", context);
        q.setParameter("origin", origin);
        q.setParameter("message_type", message_type);
        q.setParameter("message", message);
        q.setParameter("minMoment", minMoment);
        q.setParameter("maxMoment", maxMoment);
        return q;
    }
    
}
