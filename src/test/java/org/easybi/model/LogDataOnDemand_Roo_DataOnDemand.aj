// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.easybi.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.easybi.model.Log;
import org.easybi.model.LogDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect LogDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LogDataOnDemand: @Component;
    
    private Random LogDataOnDemand.rnd = new SecureRandom();
    
    private List<Log> LogDataOnDemand.data;
    
    public Log LogDataOnDemand.getNewTransientLog(int index) {
        Log obj = new Log();
        setCode(obj, index);
        setContext(obj, index);
        setFather_pid(obj, index);
        setJob(obj, index);
        setMessage(obj, index);
        setMoment(obj, index);
        setOrigin(obj, index);
        setPid(obj, index);
        setPriority(obj, index);
        setProject(obj, index);
        setRoot_pid(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void LogDataOnDemand.setCode(Log obj, int index) {
        Integer code = new Integer(index);
        obj.setCode(code);
    }
    
    public void LogDataOnDemand.setContext(Log obj, int index) {
        String context = "context_" + index;
        if (context.length() > 50) {
            context = context.substring(0, 50);
        }
        obj.setContext(context);
    }
    
    public void LogDataOnDemand.setFather_pid(Log obj, int index) {
        String father_pid = "father_pid_" + index;
        if (father_pid.length() > 20) {
            father_pid = father_pid.substring(0, 20);
        }
        obj.setFather_pid(father_pid);
    }
    
    public void LogDataOnDemand.setJob(Log obj, int index) {
        String job = "job_" + index;
        if (job.length() > 255) {
            job = job.substring(0, 255);
        }
        obj.setJob(job);
    }
    
    public void LogDataOnDemand.setMessage(Log obj, int index) {
        String message = "message_" + index;
        if (message.length() > 255) {
            message = message.substring(0, 255);
        }
        obj.setMessage(message);
    }
    
    public void LogDataOnDemand.setMoment(Log obj, int index) {
        Date moment = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setMoment(moment);
    }
    
    public void LogDataOnDemand.setOrigin(Log obj, int index) {
        String origin = "origin_" + index;
        if (origin.length() > 255) {
            origin = origin.substring(0, 255);
        }
        obj.setOrigin(origin);
    }
    
    public void LogDataOnDemand.setPid(Log obj, int index) {
        String pid = "pid_" + index;
        if (pid.length() > 20) {
            pid = pid.substring(0, 20);
        }
        obj.setPid(pid);
    }
    
    public void LogDataOnDemand.setPriority(Log obj, int index) {
        Integer priority = new Integer(index);
        obj.setPriority(priority);
    }
    
    public void LogDataOnDemand.setProject(Log obj, int index) {
        String project = "project_" + index;
        if (project.length() > 50) {
            project = project.substring(0, 50);
        }
        obj.setProject(project);
    }
    
    public void LogDataOnDemand.setRoot_pid(Log obj, int index) {
        String root_pid = "root_pid_" + index;
        if (root_pid.length() > 20) {
            root_pid = root_pid.substring(0, 20);
        }
        obj.setRoot_pid(root_pid);
    }
    
    public void LogDataOnDemand.setType(Log obj, int index) {
        String type = "type_" + index;
        if (type.length() > 255) {
            type = type.substring(0, 255);
        }
        obj.setType(type);
    }
    
    public Log LogDataOnDemand.getSpecificLog(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Log obj = data.get(index);
        Long id = obj.getId();
        return Log.findLog(id);
    }
    
    public Log LogDataOnDemand.getRandomLog() {
        init();
        Log obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Log.findLog(id);
    }
    
    public boolean LogDataOnDemand.modifyLog(Log obj) {
        return false;
    }
    
    public void LogDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Log.findLogEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Log' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Log>();
        for (int i = 0; i < 10; i++) {
            Log obj = getNewTransientLog(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
